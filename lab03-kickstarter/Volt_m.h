//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Volt.msg.
//

#ifndef __VOLT_M_H
#define __VOLT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600  // NOTE Check this version to run on new omnet version
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Volt;
/**
 * Class generated from <tt>Volt.msg:3</tt> by opp_msgtool.
 * <pre>
 * packet Volt
 *
 * {
 *     bool ackFlag = false;
 *
 *     int seqNumber;
 *
 *     int windowSize;
 *
 * }
 * </pre>
 */
class Volt : public ::omnetpp::cPacket
{
  protected:
    bool ackFlag = false;
    int seqNumber = 0;
    int windowSize = 0;

  private:
    void copy(const Volt& other);

  protected:
    bool operator==(const Volt&) = delete; // protected and unimplemented operator==(), to prevent accidental usage

  public:
    Volt(const char *name=nullptr, short kind=0);
    Volt(const Volt& other);
    virtual ~Volt();
    Volt& operator=(const Volt& other);
    virtual Volt *dup() const override {return new Volt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // Own methods
    virtual bool getFlags();
    virtual void setFlags(bool flag);

    virtual bool getAckFlag();
    virtual void setAckFlag(bool ackFlag);

    virtual int getSeqNumber() const;
    virtual void setSeqNumber(int seqNumber);

    virtual int getWindowSize() const;
    virtual void setWindowSize(int windowSize);

    bool getRetFlag(); // Retransmission Flag
    void setRetFlag(bool retFlag);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Volt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Volt& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Volt *fromAnyPtr(any_ptr ptr) { return check_and_cast<Volt*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VOLT_M_H

